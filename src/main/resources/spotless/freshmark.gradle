// å¹².mustRunAfter('base/changelog')

apply plugin: 'com.diffplug.spotless'

import com.diffplug.gradle.spotless.FreshMarkExtension

Action<FreshMarkExtension> freshmarkSetup = {
	it.target '*.md'
	it.indentWithSpaces(2)
	it.trimTrailingWhitespace()
	it.endWithNewline()
}

def changelogExt = null;
if (tasks.names.contains('changelogCheck')) {
	changelogExt = spotlessChangelog
} else if (parent != null && parent.tasks.names.contains('changelogCheck')) {
	changelogExt = parent.spotlessChangelog
}

spotless {
	groovyGradle {
		target '*.gradle'
		clearSteps()
		greclipse()
	}
	freshmark {
		freshmarkSetup.execute(it)
		properties {
			if (changelogExt != null) {
				it.put('versionLast', changelogExt.versionLast == null ? 'first-ever' : changelogExt.versionLast)
			}
		}
		// disable ratchetFrom for freshmark, because we always want to update the readme links
		ratchetFrom null
	}
}

// if spotlessChangelog was applied to this project, use that to
// reformat the markdown files after the changelog has been bumped
if (changelogExt != null) {
	// create a freshmark apply task manually
	FreshMarkExtension freshmark = new FreshMarkExtension(spotless);
	freshmarkSetup.execute(freshmark)
	freshmark.properties {
		// that uses versionNext as versionLast
		it.put('versionLast', changelogExt.versionNext)
	}
	def changelogBumpFreshmark = freshmark.createIndependentApplyTask('changelogBumpFreshmark')
	// freshmark should run after the changelog bump
	changelogBumpFreshmark.dependsOn tasks.named('changelogBump')

	def changelogBumpFreshmarkGitAdd = tasks.register('changelogBumpFreshmarkGitAdd') {
		// this git add add should run after the freshmark
		dependsOn(changelogBumpFreshmark)
		// do the git add
		doLast {
			exec { commandLine 'git', 'add' , '*.md' }
		}
	}
	tasks.named('changelogPush').configure {
		dependsOn changelogBumpFreshmarkGitAdd
	}
}
